# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String 
}

type Mutation {
createItem(title:String description:String price:Int image:String largeImage: String): Item!
updateItem(id: ID! title:String description:String price:Int): Item! 
deleteItem(id: ID!): Item
signup(email: String! password:String! name:String): User!
signin(email: String! password:String!): User!
signout: SuccessMessage
requestReset(email: String!): SuccessMessage
resetPassword(resetToken: String! password:String! confirmPassword:String!): User! 
updatePermissions(permissions: [Permission], userId: ID!): User
addToCart(id: ID!) : CartItem
removeFromCart(id: ID!): CartItem
createOrder(token: String!): Order!
}

# the items query was modified to take couple of args to filter for pagination
# the where arg is useful for when u want to search for items

type Query {
 items(where: ItemWhereInput  skip:Int first: Int): [Item]!
 item(where: ItemWhereUniqueInput!): Item #fetch single item and edit
 itemsConnection(where: ItemWhereInput): ItemConnection! #returns the aggregate for pagination
 me: User
 users: [User]!
 order(id: ID!): Order
 orders(orderBy: OrderOrderByInput): [Order]!
}



# the user type is being modified on the yogaServer is b/c there are some fields that should not be sent along to the client
# the user type is being modified on the yogaServer is b/c there are some fields that should not be sent along to the client
# check the generated graphql api for difference
type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  cart: [CartItem!]!
  orders: [OrderItem]
}